[[[ include mashlib.mash ]]]

[[[
  latex_mode = 'pdflatex'
    # Which LaTeX compiler should we use?  Choices are:
    # -- pdflatex
    # -- latex
    # -- xelatex
    # This affects both the specific compiler used and the graphics formats.

  def latex(name, compiler=None, ignore_deps=list(), keep_pdf=True, callback=None, max_compiles=None):
    # Complain in old documents.
    if compiler is not None:
      raise Exception('Compiler argument to latex() is no longer supported.  Set latex_mode variable instead.')

    # Write the document.
    save(name + ".tex") 

    # Build a list of dependencies.
    
    # Regular expressions whose matches give us dependencies.  Each one should
    # have a group named 'dep' that gives the name of the depended-upon file.
    dep_patterns = [
      r'\\includegraphics(\[.*?\])?{(?P<dep>[^}]*)}',
      r'\\lstinputlisting(\[.*?\])?{(?P<dep>[^}]*)}',
      r'\\input{(?P<dep>[^}]*)}',
      r'\\includepdf{(?P<dep>[^}]*)}',
      r'% dep (?P<dep>[^\n]*)',
      r'\\bibliography{(?P<dep>[^\n]*)}'
    ]

    deps = [name + ".tex"]
    for pattern in dep_patterns:
      for match in re.finditer(pattern, _.text, re.DOTALL):
        deps.append(match.group('dep'))

    deps = [item for item in deps if item not in ignore_deps]

    if not recall(name+".pdf", *deps):
      # Run the compiler over and over until the log stops changing.
      last_log = ''
      bibtex_done = False
      makeindex_done = False
      callback_done = False
      compiles = 0
      while True:
        try:
          shell(latex_mode + " -interaction=batchmode -file-line-error -halt-on-error %s" % name)
          compiles+=1
        except subprocess.CalledProcessError as e:
          e.stderr = open(name + '.log', 'r').read()
          raise e
        log = open(name+'.log', 'r').read()
        if not callback_done and callable(callback):
          callback()
        if not bibtex_done:
          aux = open(name+'.aux', 'r').read()
          if re.search(r'\\citation', aux):
            shell("bibtex -terse %s" % name)
            bibtex_done = True
        if not makeindex_done and os.path.isfile(name+".idx"):
          shell("makeindex %s.idx" % name)
          makeindex_done = True
        if max_compiles and compiles >= max_compiles: break
          
        if log == last_log: break
        last_log = log

      if latex_mode == 'latex':
        shell('dvipdf %s.dvi' % name)

    if keep_pdf:
      keep(name+".pdf")

  def dot(name=None, via_xfig=False, xfig_direct=True, args=''):
    # If we don't have any text in the frame, complain.
    if not _.text.strip():
      raise Exception("Called dot() on an empty frame.  This is unlikely to end well.")

    # If we don't have a name, make one up.
    if not name:
      name = anon()

    # Figure out which format we should convert to.
    if latex_mode == 'latex':
      fmt = 'eps'
    else:
      fmt = 'pdf'

    name_dot = ext(name, 'dot')
    name_fig = ext(name, 'fig')
    name_fmt = ext(name, fmt)
    save(name_dot)
    if via_xfig:
      if not recall(name_fig, name_dot):
        shell("dot -Tfig %s > %s" % (name_dot, name_fig))
      xfig(name_fig, args, direct=xfig_direct)
    else:
      if not recall(name_fmt, name_dot):
        shell("dot -T%s %s > %s" % (fmt, name_dot, name_fmt))
      push("\\includegraphics[%s]{%s}" % (args, name_fmt))

  def xfig(fname_fig, args='', direct=True, include_depths=None, exclude_depths=None):
    """
    Insert an xfig diagram.
    """

    # Sanity check.
    if include_depths and exclude_depths:
      raise Exception("Got both include_depths and exclude_depths.  Can't do both.")

    fig_source = open(fname_fig, 'r').read()

    # Find any referenes to embedded images.
    deps = list()
    for match in re.finditer(r'^(2 5 ([0-9\.-]*\s+){13}[0-9\.-]*$\s*\d\s*(.*))', fig_source, re.MULTILINE):
      pic = match.group(3)
      imprt(pic)
      deps.append(pic)

    # Figure out which format we should convert to.
    if latex_mode == 'latex':
      fmt = 'eps'
      shfmt = 'ps'
    else:
      fmt = 'pdf'
      shfmt = 'pdf'

    # Get the main root filename.
    fname = ext(fname_fig, '')[:-1]

    # Sort out the include/exclude business.
    fig2dev_args = ""
    if include_depths or exclude_depths:
      # Which list are we working with?
      if include_depths:
        flag = '+'
        depths = include_depths
      if exclude_depths:
        flag = '-'
        depths = exclude_depths

      # Make sure we actually have a list.
      try:
        iter(depths)
      except TypeError: 
        depths = (depths, )

      # Put the list into the format fig2dev expects.
      depths = flag + ",".join(map(lambda x: str(x), depths))

      # Append this string to the file name, so we can build distinct
      # versions of the same fig from different depths.
      fname += "-depths" + depths

      # Make sure fig2dev gets the message about which depths we want.
      fig2dev_args += "-K -D" + depths

    fname_fmt = ext(fname, fmt)
    fname_tex = ext(fname, 'tex')

    if direct:
      # Convert to the two part pdf/latex or ps/latex form.  Typesets using
      # LaTeX, but cannot accept includegraphics arguments.
      if args != '':
        raise Exception(r"Don't know what to do with args in xfig() with direct=True.  Maybe wrap in a \resizebox instead?")

      if not recall(fname_fmt, fname_fig, *deps):
        shell("fig2dev -L %stex %s -O %s > %s" % (shfmt, fig2dev_args, fname_fig, fname_fmt))
      if not recall(fname_tex, fname_fig, *deps):
        shell("fig2dev -L %stex_t %s -p %s %s > %s" % (shfmt, fig2dev_args, fname_fmt, fname_fig, fname_tex))
      push(r"\input{%s}" % (fname_tex, ))
    else:
      # Convert directly to an external format that can be inserted with
      # \includegraphics.  Does not typeset labels with LaTeX.
      if not recall(fname_fmt, fname_fig, *deps):
        shell("fig2dev -L %s %s %s %s" % (fmt, fig2dev_args, fname_fig, fname_fmt))
      push("\includegraphics[%s]{%s}" % (args, fname_fmt))

  def asy(name=None, args=''):
    # If we don't have any text to compile, complain.
    if not _.text.strip() and not name:
      raise Exception("Called asy() on an empty frame and not file to read.  This is unlikely to end well.")

    # If we don't have any text to compile, complain.
    if _.text.strip() and name:
      raise Exception("Called asy() with both a file name and inline text.  Which one should I compile?")


    # Figure out which format we should convert to.
    if latex_mode == 'latex':
      fmt = 'eps'
    else:
      fmt = 'pdf'

    # Form the filenames.
    name_asy = ext(name, 'asy')
    name_fmt = ext(name, fmt)

    # Make sure we have a name and a file.
    if not name:
      name = anon()
      save(name_asy)

    # Check for any  dependencies (i.e. import ....)
    deps = list()
    for match in re.finditer(r'^\s*import\s+([a-zA-Z._-]*)\s*;', _.text, re.DOTALL):
      dep_mod = ext(match.group(1), 'asy')
      deps.append(dep_mod)

    # If any of these files exist in any import directories, import them.  If
    # not, no big deal.
    imprt(*deps, conditional=True)

    if not recall(name_fmt, name_asy, *deps):
      shell("asy %s -tex %s -f %s -o %s" % (name_asy, latex_mode, fmt, name_fmt))
    push("\\includegraphics[%s]{%s}" % (args, name_fmt))

  def image(name_orig, args=''):
    if latex_mode == 'latex':
      supported_fmts = ['eps']
      target_fmt = 'eps'
    else:
      supported_fmts = ['pdf', 'png', 'jpg']
      target_fmt = 'pdf'

    (base, fmt) = os.path.splitext(name_orig)

    # If the image we have is not in a supported format, convert it.
    name_tgt = ext(name_orig, target_fmt)
    if fmt not in supported_fmts and not recall(name_tgt, name_orig):
      shell("convert %s %s" % (name_orig, name_tgt))
    
    # Insert the image into the document.
    push("\\includegraphics[%s]{%s}" % (args, name_tgt))

]]]
