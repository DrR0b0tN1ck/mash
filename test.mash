[[[def dot-named: save #1.dot; !exec dot -Tpdf #1.dot -o #1.pdf; print \includegraphics{#1.pdf}]]]
[[[def dot: @dot-named($1)]]]
[[[def pdflatex: !exec pdflatex -file-line-error -halt-on-error #1]]]
[[[def latexdoc: save #1.tex; @pdflatex(#1); @pdflatex(#1); @pdflatex(#1); !keep #1.pdf]]]
[[[def latexdoc-withbib: save #1.tex; @pdflatex(#1); !exec bibtex #1; @pdflatex(#1); @pdflatex(#1); !keep #1.pdf]]]

[[[def bibentry: save bib-$1]]]

[[[@latexdoc-withbib(examples)
  \documentclass[11pt]{article}
  \usepackage{graphicx}
  \usepackage{fullpage}

  \begin{document}
    \title{Examples of \texttt{mash} usage}
    \date{Built from \texttt{test.mash}, modified on [[[filter stat -c %y ../test.mash | cut -b 1-10; strip; push]]].}
    \author{Compiled by \texttt{[[[filter whoami; strip; push]]]} on \textbf{[[[filter date -I; strip; push]]]}.}
    \maketitle
    
    \section{Graphviz}

    Here's a graph~\cite{bcd}:
    \begin{center}
    [[[@dot
      graph {
        rankdir=LR
        d -- e
        d -- f
        d -- g
        e -- h
      }
    ]]]
    \end{center}

    Here's another graph.
    \begin{center}
    [[[@dot-named(g2)
      graph { rankdir=LR; a -- b -- c -- d; b -- d}
    ]]]
    \end{center}

    \section{External Files}

    Files needed for the build that are not generated by the \texttt{mash}
    document, like this stick figure drawn with \texttt{xfig}, must be imported first:
    
    [[[def xfig: import #1.fig; !exec fig2dev -L pdf #1.fig #1.pdf; print \includegraphics{#1.pdf}]]]

    \begin{center}
      [[[@xfig(stick)]]]
    \end{center}

    \section{Python}

    Here are some Fibonacci numbers (which are computed every time we mash this document):
    $$
      [[[unindent; filter python; strip; push
        a = 0
        b = 1

        for i in range(1, 10):
          c = a + b
          a = b
          b = c
          print c, "\\qquad",
      ]]]
    $$

    Here are some squares (which are computed only when the code changes):
    [[[unindent; save $1.py; !exec python $1.py > $2.tex; print \input{$2.tex}
      print "$$"
      for i in range(1, 10):
        print i*i, "\\qquad"
      print "$$"
    ]]]


    \section{Include Files}
    [[[include included.mash]]]


    \section{Named chunks}

      [[[unindent; filter python; store chunk ([a-zA-Z0-9]*) \(\((.*?)\)\); clear; push
        import math
        print "chunk A (( The square root of 2 is %f. ))" % math.sqrt(2)
        print "chunk B (( The square root of 3 is %f. ))" % math.sqrt(3)
        print "chunk C (( The square root of 4 is %f. ))" % math.sqrt(4)
      ]]]

      Here's a simple fact:
      \begin{center}
        [[[chunk A; push]]]
      \end{center}
      This is also true:
      \begin{center}
        [[[chunk C; push]]]
      \end{center}
      And this:
      \begin{center}
        [[[chunk B; push]]]
      \end{center}

    \section{Citations}
    [[[@bibentry
      @book{abc,
        author = {A. B. Cee and D. E. Eff},
        title = {Title of Another Book},
        publisher = {xyz},
        year = 2017
      }
    ]]]

    Here is a citation~\cite{abc} and another one~\cite{bcd}.  This
    bibliography is assembled from the entries defined above.

    [[[@bibentry
      @book{bcd,
        author = {A. B. Cee and D. E. Eff},
        title = {Title of a Book},
        publisher = {xyz},
        year = 2016
      }
    ]]]

    [[[read bib-*; save test.bib]]]

    \bibliographystyle{plain}
    \bibliography{test}

    \section{Dependencies}
    [[[unindent; save a.py
      import time
      def func(x):
        return 4*x
    ]]]

    Sometimes you'll need to declare dependencies explicitly.  This Python code
    depends on module a, create above, but \texttt{mash} doesn't know that
    without a depend command.  If the \texttt{a.py} frame changes, then this
    Python snippet will be re-run:
    [[[unindent; save $1.py; depend a.py; !exec python $1.py > $1.txt; clear; read $1.txt; push
      import a
      import time
      print a.func(10)
    ]]]


  \end{document}

]]]

[[[@latexdoc(manual)
  \documentclass[11pt]{article}

  \begin{document}

    Mash is a tool for manipulating small snippets of text.  A mash document
    consists of one or more \emph{frames}, which may be nested within each
    other.  Each frame has a list of zero or more \emph{commands} along with a
    block of \emph{text} on which those commands operate.

    \begin{enumerate}
      \item \texttt{\@}
      \item \texttt{chunk}
      \item \texttt{clear}
      \item \texttt{def}
      \item \texttt{depend}
      \item \texttt{emit}
      \item \texttt{exec}
      \item \texttt{filter}
      \item \texttt{import}
      \item \texttt{include}
      \item \texttt{keep}
      \item \texttt{print}
      \item \texttt{push}
      \item \texttt{read}
      \item \texttt{save}
      \item \texttt{store}
      \item \texttt{strip}
      \item \texttt{unindent}
    \end{enumerate}
   
  \end{document}

]]]

