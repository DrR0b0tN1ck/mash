#!/usr/bin/env python

# Q. Why?
#
# A1. Allows me to avoid naming things that appear only quickly in passing.
# A2. Allows me to divide things into files based on content, rather than language.
# A3. Can keep content and build instructions in the same place.


import argparse
import filecmp
import hashlib
import sys
import re
import os
import subprocess
import shutil
import difflib
import glob
import time

class Frame:
  def __init__(self, _parent, _commands, _indent):
    # Remember our parent.
    self.parent = _parent

    # Keep the list of commands.
    self.commands = _commands 

    # How much indent do we have on the first line?  The unindent command will
    # remove this much from each line before processing anything.  Important if
    # the text is python code.
    self.indent = _indent

    # Start with no text.  We'll probably get more later from
    # append_text.
    self.text = ""

    # We may need to hash our text as a way of genreating unique but
    # predictable anonymous filenames.
    self.text_hash = None

    # Remember whether anything in this frame has changed.  This is an
    # attribute here, rather than a local variable below in execute() because
    # it might need to be set by a child frame.
    self.dirty = False

    # Keep track of any macros that may be defined, in the form of a hash from
    # names to definitions.  Note that resolve_macro also looks up the chain of
    # parent frames, if it cannot find a definition at this level.
    self.macros = dict()

    # A dictionary of text chunks, for spreading the output of a program across
    # several places.  Used by the store, lookup, and push commands.
    self.chunks = dict()

    if self.parent:
      self.parent.show('* ' + self.commands)
      self.pp = self.parent.pp + '    '
    else:
      self.pp = ''


  def show(self, txt):
    print self.pp + str(txt)

  def append_text(self, new_text):
    self.text += new_text

  def make_name(self, number):
    if self.text_hash is None:
      self.text_hash = hashlib.sha1(self.text + number).hexdigest()[:7]
    return self.text_hash + number

  def resolve_macro(self, name, args_list):
    if name in self.macros:
      commands = self.macros[name]
      def resolve_arg(m):
        arg_num = int(m.group(1))-1
        try:
          arg = args_list[arg_num]
        except IndexError:
          raise Exception("Definition of macro %s uses #%d, but only %d arguments were given." % (name, arg_num+1, len(args_list)))
        return arg

      commands = re.sub(r'#(\d+)', resolve_arg, commands)
      return commands.split(';')

    elif self.parent:
      # No definition for this macro at this level.  Maybe our parent knows it?
      return self.parent.resolve_macro(name, args_list)

    else:
      # No definition at this level, and no parent to ask.  Give up.
      return None
  
  def resolve_chunk(self, key):
    try:
      x = self.chunks[key]
      return x
    except KeyError:
      try:
        return self.parent.resolve_chunk(key)
      except AttributeError:
        raise Exception("Chunk '%s' not found." % key)

  def execute(self, mash):
    # Called when this frame's command and text have been fully read from the
    # input file.  Executes the commands.
    mash.frame_count += 1

    # Are there any commands?  If not, ingore this frame.  Not sure why this
    # would happen except at the very top level, or for frames that contain
    # only comments.
    if not self.commands:
      return

    # Is this a macro definition?  These are special because they consme *all*
    # of the commands in the list.  The definition goes in the parent frame
    # (rather than this one), because this frame probably only has the macro
    # definition, and will be going away soon.
    match = re.search(r'def ([a-zA-Z0-9_-]+): (.*)', self.commands)
    if match:
      name = match.group(1)
      definition = match.group(2)
      self.parent.macros[name] = definition
      return


    # Split the command list into individual commands.
    command_list = self.commands.split(';')

    # Loop through the commands we have.
    while command_list:
      command = command_list[0]
      command_list = command_list[1:]
      command = command.strip()
      mash.command_count += 1

      # Replace things like $1 with anonymous names based on hashing the text.
      command = re.sub(r'\$(\d+)', lambda m: self.make_name(m.group(1)), command)
      self.show(command)

      # Commands that start with ! are "build" commands, which we should only
      # execute if we are a 'dirty' frame: If something has changed.
      match = re.search(r'^!(.*)', command)
      if match and self.dirty:
        # We need to build.  Drop the ! and continue normally.
        command = match.group(1)
      if match and not self.dirty:
        # No need to build.  Skip to the next thing.
        self.show("  (skipped)")
        continue

      # Save text to a file.
      match = re.search(r"^save +(.*)", command)
      if match:
        target = match.group(1)
        
        # Figure out if the file already exists with the same contents.
        existing_contents = ''
        try:
          f = open(target, 'r')
          existing_contents = f.read()
          f.close()
          exists_already = (existing_contents == self.text)
        except IOError:
          exists_already = False

        if not exists_already:
          if mash.args.diff:
            pass
            self.show('  ' + ''.join(difflib.unified_diff(existing_contents.splitlines(1), self.text.splitlines(1))))
          f = open(target, 'w')
          print >>f, self.text,
          f.close()
          self.dirty = True
          mash.written[target] = True
          self.show("  (writing; frame is dirty)")
        else:
          self.show("   (no change)")
          pass
        mash.touched[target] = True

        continue
      
      # print: Print literal text into the parent frame at this location.
      match = re.search(r"^print +(.*)", command)
      if match:
        output = match.group(1)
        self.parent.append_text(output)
        continue
      
      # Read a file (or files) and append their contents to the text of this
      # frame.
      match = re.search(r"^read +(.*)", command)
      if match:
        for filename in glob.glob(match.group(1)):
          self.show("  " + filename)
          f = open(filename, 'r')
          self.append_text(f.read())
          f.close()
        continue

      # purge: Remove files, unless they've been touched by a previous command.
      match = re.search(r"^purge +(.*)", command)
      if match:
        for filename in glob.glob(match.group(1)):
          if filename in mash.touched:
            self.show("  " + filename + " (touched; leaving alone)")
          else:
            self.show("  " + filename + " (not touched; removing)")
            os.remove(filename)

        continue

      # Depend: Mark the frame dirty if given other files have been written
      # elsewhere.
      match = re.search(r"^depend +(.*)", command)
      if match:
        deps = match.group(1).strip()
        for dep in deps.split(' '):
          dep = dep.strip()
          if dep in mash.written:
            self.show("  (dep has changed; frame is dirty)")
            self.dirty = True
          else:
            self.show("  (no change)")
        continue

      # emit: Note that a given file is being written (for example as an effect
      # of an exec command) so that we can have dependencies on it later.
      match = re.search(r"^emit +(.*)", command)
      if match:
        file_to_emit = match.group(1)
        mash.written[file_to_emit] = True
        mash.touched[file_to_emit] = True
        continue

      # Execute a shell command, allowing its output to go to the terminal in
      # which mash is running, and without changing the text.  Complain if the
      # command returns a non-zero (error) return code.
      match = re.search(r"^exec +(.*)", command)
      if match:
        shell_command = match.group(1)
        return_code = os.system(shell_command)
        if return_code != 0:
          raise Exception("Shell command '%s' failed with return code %d." % (shell_command, return_code))
        continue

      # Change the directory for kept files.
      match = re.search(r"^keepdir +(.*)", command)
      if match:
        mash.args.keep_directory = match.group(1)
        mash.args.keep_directory = mash.fix_path(mash.args.keep_directory)
        continue

      # Filter the text through a shell command.
      match = re.search(r"^filter +(.*)", command)
      if match:
        shell_command = match.group(1)
        p = subprocess.Popen(shell_command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        self.text = p.communicate(input=self.text)[0]
        if p.returncode != 0:
          raise Exception("Filter command '%s' failed with return code %d." % (shell_command, p.returncode))
        continue

      # Strip leading a trailing spaces.
      match = re.search(r"^strip", command)
      if match:
        self.text = self.text.strip()
        continue

      # Push our text, macros, and chunks up into the parent frame.
      match = re.search(r"^push", command)
      if match:
        self.parent.append_text(self.text)
        self.parent.macros.update(self.macros)
        self.parent.chunks.update(self.chunks)
        continue

      # Fix the indentation of the text.
      match = re.search(r"^unindent", command)
      if match:
        self.show("  unindenting by %s spaces" % self.indent)
        self.text = re.sub("\n {%d}" % self.indent, "\n", self.text)
        continue

      # Clear the current text.
      match = re.search(r"^clear", command)
      if match:
        self.text = ""
        continue

      # Include another mash file.
      match = re.search(r"^include +(.*)", command)
      if match:
        file_to_include = match.group(1)
        include_text = open(os.path.join(mash.original_directory, file_to_include), 'r').read()
        mash.mash_string(include_text, self)
        self.parent.append_text(self.text)
        self.parent.macros.update(self.macros)
        self.parent.chunks.update(self.chunks)
        continue

      # Process our text as mash code.  Not needed for code literally in the
      # source file, but if some previous commands have turned the text into
      # mash code...
      match = re.search(r"^mash", command)
      if match:
        mash.mash_string(self.text, self)
        continue


      # Keep a file by copying it to the input directory.
      match = re.search(r"^keep +(.*)", command)
      if match:
        file_to_keep = match.group(1)
        shutil.copy(file_to_keep, mash.args.keep_directory)
        continue

      # Import a file from the input directory into the build directory.
      match = re.search(r"^import +(.*)", command)
      if match:
        file_to_import = match.group(1)
        fr = os.path.join(mash.original_directory, file_to_import)
        to = os.path.join(mash.args.build_directory, os.path.basename(file_to_import))

        # Does this file exist already?
        if os.path.isfile(to) and filecmp.cmp(fr, to, False):
          # Yes.  Nothing to do.
          self.show("  (no change)")
        else:
          # No.  Copy it in and set the dirty flag.
          self.show("  (importing)")
          shutil.copyfile(fr, to)
          self.dirty = True

        continue
      
      # store: Scan the text for named chunks, using the given pattern.  Store
      # them for later in our chunks dictionary.
      match = re.search(r"^store +(.*)", command)
      if match:
        pattern = match.group(1)

        number_of_chunks_before = len(self.chunks)

        def store_chunk(m):
          key = m.group(1)
          try:
            value = m.group(2)
          except IndexError:
            raise Exception("Invalid store pattern '%s'.  Needs a second group." % pattern)
          self.show("  chunk " + key)
          self.chunks[key] = value

        re.sub(pattern, store_chunk, self.text, flags=re.DOTALL)

        number_of_chunks_after = len(self.chunks)
        difference = number_of_chunks_after - number_of_chunks_before

        if difference == 0:
          raise Exception("No new chunks found for pattern '%s' in this text:\n%s" % (pattern, self.text))

        continue

      # chunk: Append a named chunk to the text.
      match = re.search(r"^chunk +(.*)", command)
      if match:
        key = match.group(1)
        self.append_text(self.resolve_chunk(key))
        continue

      # quit: Ignore the rest of the commands in this frame.
      match = re.search(r"^quit", command)
      if match:
        break

      # Last change: Is it a macro to expand?
      match = re.search(r"([a-zA-Z0-9_-]+) *(.*)", command)
      if match:
        macro_name = match.group(1)
        macro_args = match.group(2).split(',')
        expansion = self.resolve_macro(macro_name, macro_args)
        if expansion:
          self.show("  expanding macro to:" + ";".join(expansion))
          command_list = self.resolve_macro(macro_name, macro_args) + command_list
          continue
        else:
          # No definition for this macro.
          pass

      # Couldn't make any sense of this command.
      raise Exception("Unknown command: %s" % command)
  


    # All done executing commands.  Last step: If we're dirty, then our parent
    # should be dirty too.
    if self.dirty:
      self.parent.dirty = True
    
    # Done!
    return

  
  def __repr__(self):
    return "Frame(%s,%s)" % (self.commands.__repr__(), self.text.__repr__())


class Mash:

  def mash_string(self, text, top_frame):
    # The current frame for whatever we're parsing now.  This top one has no
    # parent.
    current_frame = top_frame
    
    while text:
      # Match an opening delimiter?
      match = re.search(r"^\[\[\[(.*)\n(\s*)", text)
      if match:
        commands = match.group(1)
        indent = match.group(2)

        # Remove the part that matched from the input text.
        text = text[len(match.group(0)):]

        # Is this a one-liner or a multi-liner?
        match2 = re.search(r"^(.*?)\]\]\](.*)", commands)
        if match2:
          # A one line frame.  Create the frame and execute it right away.
          # Then put everything we've matched after that (including the newline
          # and indent matched in the first re above) back in at the front of
          # the input text.
          commands = match2.group(1)
          Frame(current_frame, commands, len(indent)).execute(self)
          text = match2.group(2) + '\n' + indent + text
        else:
          # A multi-line frame.  Create a new frame as the child of the current
          # one.  We'll add the text in future iterations of this loop, and
          # execute when we see the closing delimiter.
          current_frame = Frame(current_frame, commands, len(indent))
        
        continue
          

      # Match a closing delimiter?
      match = re.search(r"^\]\]\]", text)
      if match:
        current_frame.execute(self)
        current_frame = current_frame.parent
        text = text[3:]
        continue
      
      # Not seeing opening or closing delimiters.  Grab as much ordinary text as
      # we can.  At least one character, until we see [ or ] again.
      match = re.search(r"^(.[^\[\]]*)", text, re.DOTALL)
      current_frame.append_text(match.group(0))
      eaten = match.group(1)
      text = text[len(eaten):]

  def fix_path(self, path):
    # Make sure the given path is absolute, and that it exists.
    if not os.path.isabs(path):
      path = os.path.join(self.original_directory, path)

    if not os.path.exists(path):
      os.makedirs(path)
    return path
    

  def engage(self):
    start_time = time.time()
    # This is the 'main' function.
    parser = argparse.ArgumentParser()
    parser.add_argument(dest='input_filename', help='input filename', nargs='?')
    parser.add_argument('--diff', dest='diff', help='show differences in saved files', action='store_true')
    parser.add_argument('--debug', '-d', dest='debug', help='on error, show stack trace', action='store_true')
    parser.add_argument('--build_directory', '-b', dest='build_directory', help='directory for working files', default='.mash')
    parser.add_argument('--keep_directory', '-k', dest='keep_directory', help='directory for kept files', default='.')
    parser.add_argument('--clean', '-c', dest='clean', action='store_true')
    self.args = parser.parse_args()

    if self.args.clean:
      if os.path.exists(self.args.build_directory):
        shutil.rmtree(self.args.build_directory)
      if self.args.input_filename is None:
        return

    if self.args.input_filename is None:
      parser.print_help()
      sys.exit(1)

    self.original_directory = os.getcwd()

    self.args.keep_directory = self.fix_path(self.args.keep_directory)
    self.args.build_directory = self.fix_path(self.args.build_directory)

    text = open(self.args.input_filename, 'r').read()

    os.chdir(self.args.build_directory)
    
    self.frame_count = 1
    self.command_count = 0

    self.written = dict()
    self.touched = dict()

    if self.args.debug:
      self.mash_string(text, Frame(None, "", 0))
    else:
      try:
        self.mash_string(text, Frame(None, "", 0))
      except Exception as e:
        print "Error:", e
        sys.exit(1)

    end_time = time.time()
    print "%d commands; %d frames; %0.1f seconds" % (self.command_count, self.frame_count, end_time - start_time)


if __name__ == '__main__':
  Mash().engage()

  
