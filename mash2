#!/usr/bin/env python3

# -- mash --
#
# This is a tool that allows text in various languages to be stored together
# in a single input file. along with instructions for manipulating, mutating,
# and storing that text.
#
# Q. Why?
#
# A1. Allows me to avoid naming things that appear only quickly in passing.
# A2. Allows me to divide things into files based on content, rather than
#     language.
# A3. Can keep content and build instructions in the same place.
#
# History:
#   2016-11-17: Started as a revision of older, presentation-specific scripts.
#   2016-12-12: First working version.
#   2017-02-20: Various language additions, mostly for build commands.
#   2017-04-20: More language expansions.  Better error handling.
#   2017-07-11: Betting handling of semicolons in commands.
#   2017-12-05: Better error messages.
#   2018-04-06: @@ syntax for quick importing
#   2018-07-26: Better handling of commas in commands.
#   2018-08-17: & syntax for inserting chunks.
#   2019-04-02: Starting major rewrite, replacing custom language with Python.

import argparse
import sys
import re
import os
import subprocess
import time


class Mash:
  def fix_path(self, path):
    """ Make sure the given path is absolute, and that it exists."""
    if not os.path.isabs(path):
      path = os.path.join(self.original_directory, path)

    if not os.path.exists(path):
      os.makedirs(path)
    return path
    
  def engage(Self):
    """ This is the 'main' function."""
    start_time = time.time()

    parser = argparse.ArgumentParser()
    parser.add_argument(dest='input_filename', help='input filename', nargs='?')
    parser.add_argument('--build_directory', '-b', dest='build_directory', help='directory for working files', default='.mash')
    parser.add_argument('--debug', '-d', dest='debug', help='on error, show stack trace', action='store_true')
    self.args = parser.parse_args()

    if self.args.input_filename is None:
      parser.print_help()
      sys.exit(1)
    
    self.args.build_directory = self.fix_path(self.args.build_directory)
    self.original_directory = os.getcwd()
    os.chdir(self.args.build_directory)

    self.frame_count = 1
    self.command_count = 0

    end_time = time.time()
    print "%d commands; %d frames; %0.1f seconds" % (self.command_count, self.frame_count, end_time - start_time)

if __name__ == '__main__':
  Mash().engage()

  
