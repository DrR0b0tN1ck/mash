#!/usr/bin/env mash
[[[include mashlib.mash]]]

[[[include latex.mash]]]

[[[
  import re


  bibliography_entries = ""
  def bib_entry():
    global bibliography_entries
    bibliography_entries += _.text
  
  def bibliography(style):
    _.text = bibliography_entries
    save('bib.bib')
    push('\\bibliographystyle{%s}' % style)
    push('\\bibliography{bib}')

]]]




[[[
    _.text = re.sub("__CLOSE__", "]]" + "]", _.text)
    _.text = re.sub("__OPEN__", "[[" + "[", _.text)
    latex("example")
|||
  \documentclass[11pt]{article}
  \usepackage{graphicx}
  \usepackage{fullpage}
  \begin{document}
    \title{Mash User's Guide}
    \author{Compiled by [[[filter("whoami");strip();push()]]] on [[[filter("date -I");strip();push()]]].}
    \date{Built from \texttt{test.mash2}, modified on [[[filter("stat -c %y ../test.mash2 | cut -b 1-10");strip();push()]]].}
    
    \maketitle

    \section{What is mash?}
    Mash is a tool for manipulating snippets of text.  It allows both text
    and commands for manipulating that text to be blended together in a
    single document.

    \section{Basic definitions}
    A mash document consists of one or more \emph{frames}, which may be
    nested within each other.  Each frame consists of some \emph{commands}
    along with a block of \emph{text} on which those commands operate.

    Each frame is delimited by triple-square-bracket marks, __OPEN__ and
    __CLOSE__.  The first thing inside those delimiters should be a chunk of
    Python code, enclosed in curly braces.

    \section{Examples}
    \subsection{Graphviz}
    Here is a graph, compiled using \texttt{dot} from text embedded right
    here.
    \begin{center}
      [[[dot(args='scale=0.5') |||
        graph {
          rankdir=LR;
          A -- B
        }
      ]]]
    \end{center}
    Here is another graph.  Notice that we need not invent (nor remember)
    filenames for each of these.
    \begin{center}
      [[[dot(args='scale=0.5') |||
        digraph {
          rankdir=LR;
          A -> B -> C -> D -> E
        }
      ]]]
    \end{center}
    
    \subsection{Xfig}
    Here is an xfig figure.  It depends on an external xfig document, which
    is imported into the build directory first.
    \begin{center}
      [[[xfig("@@figs/stick.fig")]]]
    \end{center}

    \subsection{BibTeX}
    [[[bib_entry() |||
      @book{abc,
        author = {A. B. Cee and D. E. Eff},
        title = {Title of Another Book},
        publisher = {xyz},
        year = 2017
      }
    ]]]

    Here is a citation~\cite{abc} and another one~\cite{bcd}.  The
    bibliography is assembled from the entries defined above.

    [[[bib_entry() |||
      @book{bcd,
        author = {A. B. Cee and D. E. Eff},
        title = {Title of a Book},
        publisher = {xyz},
        year = 2016
      }
    ]]]

    \subsection{Python}

    Here are some Fibonacci numbers which are computed every time we mash
    this document:
    $$
      [[[unindent(); filter("python"); strip(); push() |||
        a = 0
        b = 1

        for i in range(1, 10):
          c = a + b
          a = b
          b = c
          print c, "\\qquad",
      ]]]
    $$

    Here are some squares which are computed only when the code changes:
    [[[
      def python_output():
        unindent();
        name = anon();
        save(name+".py")
        if not retrieve(name+".tex", name+".py"):
          shell("python %s > %s" % (name+".py", name+".tex"))
        push("\input{%s.tex}" % name)
    ]]]

    [[[python_output() |||
      print "$$"
      for i in range(1, int(1e6)):
        pass

      for i in range(1, 10):
        print i*i, "\\qquad"
      print "$$"
    ]]]



    \subsection{Include files}
    [[[include included.mash]]] 

    \section{The Mash core}
    - frames
      
      + unindenting

      + escaping

    - special command: \#include

    - frame hooks, before and after


    \section{The standard library}
    
    [[[bibliography('plain')]]]

  \end{document}
]]]

