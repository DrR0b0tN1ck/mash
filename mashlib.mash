[[[
# vim: set ft=python :

# This is a library of "standard" functions that provide many of the basic
# operations that one might want to do on a mash frame.  Most mash documents
# will include this near the start. 

import difflib
import filecmp
import glob
import hashlib
import os
import re
import shutil
import subprocess
import resource
import sys

# First, some initialization.  This should only happen once.
try:
  mashlib_initialized
except NameError:
  mashlib_initialized = False

if not mashlib_initialized:
  mashlib_initialized = True
  # This is the directory where started.
  original_directory = os.getcwd()
  sys.path.append(original_directory)

  # This is the directory where we will do all of our work, execute commands,
  # etc.  This will be the current directory most of the time.
  build_directory = os.path.join(original_directory, ".mash")
  sys.path.append(build_directory)

  # This directory has things built in previous runs.  If nothing has changed,
  # then we can just copy things over from there instead of re-building them.
  archive_directory = os.path.join(original_directory, ".mash-archive")

  # This is the directory that should contain the completed output files.
  keep_directory = original_directory

  # This is a list of places we should search when importing a new file.
  import_search_directories = [original_directory, ]

  # Move anything from the existing build directory to be the archive directory.
  if os.path.exists(build_directory):
    for file_name in os.listdir(build_directory):
      if not os.path.exists(archive_directory):
        os.makedirs(archive_directory)
      full_file_name = os.path.join(build_directory, file_name)
      full_file_name_archive = os.path.join(archive_directory, file_name)
      if os.path.isdir(full_file_name_archive):
        shutil.rmtree(full_file_name_archive)
      #print("%s --> %s" % (full_file_name, archive_directory))
      shutil.move(full_file_name, os.path.join(archive_directory, file_name))



  # Make sure we have a build directory and that it's the current/working
  # directory.
  if not os.path.exists(build_directory):
    #print("Creating", build_directory)
    os.makedirs(build_directory)
  os.chdir(build_directory)

def ext(filename, ext):
  """Return a modified version of the given filename with the given extension."""
  (x,y) = os.path.splitext(filename)
  return x + "." + ext

def save(target, contents=None):
  """Ensure that the current contents of this frame exist in the build
  directory as a file with the given name.  Use an old copy from the archive
  directory if possible."""
  global _
  
  # Use the current frame text by default.
  if contents is None:
    contents = _.text

  # Are we dealing with binary data or text?
  binary = hasattr(contents, 'decode')
  if binary:
    bin_mode_flag = 'b'
  else:
    bin_mode_flag = ''

  # Check for an identically-named, identical-contents file in the archive
  # directory.
  archive_name = os.path.join(archive_directory, target)
  try:
    existing_contents = open(archive_name, 'r' + bin_mode_flag).read()
    exists_already = (existing_contents == contents)
  except IOError as e:
    exists_already = False

  if exists_already:
    # We have this exact file in the archive directory.  Copy it instead of
    # saving directly.  This keeps the timestamp intact, which can help us
    # tell elsewhere if things need to be rebuilt.
    #print("Using %s from archive." % target)
    shutil.copy2(archive_name, target)

  else:
    # We don't have a file like this anywhere.  Actually save it.
    #print("Writing %d bytes to %s." % (len(_.text), target))
    open(target, 'w'+bin_mode_flag).write(contents)
 
def read(fname):
  _.text += open(fname, 'r').read()

def recall(target, *sources):
  """Check whether the given target file exists in the archive directory,
  and if so, if it's newer than all of the given sources.  If so, copy it
  over and return True.  If not, do nothing and return False."""
  archive_target = os.path.join(archive_directory, target)

  ok = True

  if not os.path.exists(archive_target):
    print("(%s): [does not exist]" % target, end='')
    ok = False
    target_time = None
  else:
    print("%s:" % target, end='')
    target_time = os.path.getmtime(archive_target)
    if sources:
      for source in sources:
        source_time = os.path.getmtime(source)
        if target_time is not None and source_time > target_time:
          print(" (%s)" % source, end='')
          ok = False
        else:
          print(" %s" % source, end='')
    else:
      print(" [no sources]")


  print()

  if ok:
    if os.path.isfile(archive_target):
      shutil.copy2(archive_target, build_directory)
    else:
      if os.path.exists(target):
        shutil.rmtree(target)
      shutil.copytree(archive_target, os.path.join(build_directory, target))

  return ok

def anon():
  """Return an anonymous name constructed by hashing the contents of the
  current frame."""
  global _
  return hashlib.sha1(_.text.encode('UTF-8')).hexdigest()[:7]

def shell(command, stdin=None):
  """
  Execute the given command in a shell.  Raise subprocess.CalledProcessError
  if the command gives a non-zero return code.  Return the CompletedProcess
  object, which has stdout and stderr attributes.  In addition, this object
  has attributes tacked on to it showing the user time and system time
  consumed, as reported by getrusage.
  """
  print("  ", command)
  usage_before = resource.getrusage(resource.RUSAGE_CHILDREN)
  completed_process = subprocess.run(command, shell=True, check=True, input=stdin, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=60000)
  usage_after = resource.getrusage(resource.RUSAGE_CHILDREN)
  completed_process.user_time = usage_after.ru_utime - usage_before.ru_utime
  completed_process.sys_time = usage_after.ru_stime - usage_before.ru_stime
  return completed_process


def push(text=""):
  """Insert text, either the given argument or the contents of the current frame, into the parent frame."""
  global _
  if text:
    _.parent.contents += str(text)
  else:
    _.parent.contents += _.text

def keep(file_to_keep):
  """Copy a file or directory from the working directory to the keep
  directory."""
  if not os.path.exists(keep_directory):
    os.makedirs(keep_directory)
  if os.path.isfile(file_to_keep):
    shutil.copy2(file_to_keep, keep_directory)
  elif os.path.isdir(file_to_keep):
    target = os.path.join(keep_directory, file_to_keep)
    if os.path.exists(target):
      shutil.rmtree(target)
    shutil.copytree(file_to_keep, target)
  else:
    print(file_to_keep)
    raise Exception("Don't know how to keep %s, which is neither file nor directory." % file_to_keep)
  
def imprt(*fnames):
  """Copy one or more files to the build directory."""
  for fname in fnames:
    # Figure out the source filename.
    fr = None
    for directory in import_search_directories:
      x = os.path.join(directory, fname)
      if os.path.exists(x):
        fr = x
        break
    if fr is None:
      raise Exception("Trying to import %s, but could not find it in any of these places:\n %s" % (fname, '\n'.join(import_search_directories)))

    # Figure out the destination filename.
    to = os.path.join(build_directory, os.path.basename(fname))

    # Does this file exist already?
    if os.path.isfile(to) and filecmp.cmp(fr, to, False):
      # Yes.  Nothing to do.
      pass
    else:
      print(fr)
      shutil.copy2(fr, to)
  
  return os.path.basename(fname)

def filter(command):
  """
  Execute the given command in a shell, giving the contents of this frame as
  standard input.  Replace the contents of this frame with the output.
  """
  result = shell(command, stdin=_.text.encode('utf-8'))
  _.text = result.stdout.decode('utf-8')

def strip():
  _.text = _.text.rstrip()

def unindent():
  match = re.search(r'([ \t]*)[^ \t\n]', _.text)
  if match:
    prefix = match.group(1)
    _.text = re.sub('\n' + prefix, '\n', _.text)


def before_frame_hook():
  # For things like "[at][at]abc/xyz", import that file and replace with
  # "xyz".  Note the need to avoid putting two @ symbols together here,
  # because this code might run on itself.
  def import_and_mangle(match):
    fr = match.group(1)
    fr = os.path.join(original_directory,fr)
    to = imprt(fr)
    return to
  _.text = re.sub(r'@'+r'@([^\n},\']*)', import_and_mangle, _.text)
  _.commands = re.sub(r'@'+r'@([^\n},\'\"]*)', import_and_mangle, _.commands)

def spell_check():
  """
  Run aspell on every file with a .mash extension in the original directory.
  """
  for file_name in glob.glob(os.path.join(original_directory, '*.mash')):
    os.system("aspell check --home-dir=" + original_directory + " --keymapping ispell " + file_name)
    

]]]

