[[[{
# vim: set ft=python :

# This is a library of "standard" functions that provide many of the basic
# operations that one might want to do on a mash frame.  Most mash documents
# will include this near the start. 

import difflib
import glob
import filecmp
import hashlib
import os
import re
import shutil
import subprocess

# This is the directory where started.
original_directory = os.getcwd()

# This is the directory where we will do all of our work, execute commands,
# etc.  This will be the current directory most of the time.
build_directory = os.path.join(original_directory, ".mash")

# This is the build directory from the previous time through.  If nothing has
# changed, then we can just copy things over from there instead of re-building
# them.
prev_directory = os.path.join(original_directory, ".mash-prev")

# This is the directory that should contain the completed output files.
keep_directory = original_directory


# Move any existing build directory to be the previous directory.  Delete any
# existing previous directory.
if os.path.exists(prev_directory):
  #print("Removing", prev_directory)
  shutil.rmtree(prev_directory)

if os.path.exists(build_directory):
  #print("Moving", build_directory, "to", prev_directory)
  shutil.move(build_directory, prev_directory)

# Make sure we have a build directory and that it's the current/working
# directory.
if not os.path.exists(build_directory):
  #print("Creating", build_directory)
  os.makedirs(build_directory)
os.chdir(build_directory)

def save(target):
  """Ensure that the current contents of this frame exist in the build
  directory as a file with the given name.  Use an old copy from the previous
  directory if possible."""
  global _
  # Does this file already exist?  If so, something is probably wrong.
  if(os.path.isfile(target)):
    raise Exception("File %s already exists.", target)

  # Check for an identically-named, identical-contents file in the previous
  # directory.
  prev_name = os.path.join(prev_directory, target)
  try:
    existing_contents = open(prev_name, 'r').read()
    exists_already = (existing_contents == _.text)
  except IOError as e:
    exists_already = False

  if exists_already:
    # We have this exact file in the previous directory.  Copy it instead of
    # saving directly.  This keeps the timestamp intact, which can help us
    # tell elsewhere if things need to be rebuilt.
    #print("Using %s from previous build." % target)
    shutil.copy2(prev_name, target)

  else:
    # We don't have a file like this anywhere.  Actually save it.
    #print("Writing %d bytes to %s." % (len(_.text), target))
    print(_.text, file=open(target, 'w'), end='')

def retrieve(target, *sources):
  """Check whether the given target file exists in the previous directory,
  and if so, if it's newer than all of the given sources.  If so, copy it
  over and return True.  If not, do nothing and return False."""
  prev_target = os.path.join(prev_directory, target)

  ok = True

  if not os.path.isfile(prev_target):
    #print(target,"is not available.")
    print("(%s):" % target, end='')
    ok = False
    target_time = None
  else:
    print("%s:" % target, end='')
    target_time = os.path.getmtime(prev_target)


  for source in sources:
    source_time = os.path.getmtime(source)
    if target_time is None or source_time > target_time:
      print(" (%s)" % source, end='')
      ok = False
    else:
      print(" %s" % source, end='')

  print()
  if ok: shutil.copy2(prev_target, build_directory)

  return ok

def anon():
  """Return an anonymous name constructed by hashing the contents of the
  current frame."""
  global _
  return hashlib.sha1(_.text.encode('UTF-8')).hexdigest()[:7]

def shell(command):
  """Execute the given command in a shell.  If it fails, complain."""
  print("  ", command)
  return_code = os.system(command)
  if return_code != 0:
    raise Exception("Shell command '%s' failed with return code %d." % (command, return_code))

def push(text=""):
  global _
  if text:
    _.parent.contents += text
  else:
    _.parent.contents += _.text

def keep(file_to_keep):
  """Copy a file or directory from the working directory to the keep
  directory."""
  if os.path.isfile(file_to_keep):
    shutil.copy2(file_to_keep, keep_directory)
  elif os.path.isdir(file_to_keep):
    target = os.path.join(keep_directory, file_to_keep)
    if os.path.exists(target):
      shutil.rmtree(target)
    shutil.copytree2(file_to_keep, target)
  else:
    raise Exception("Don't know how to keep %s, which is neither file nor directory." % file_to_keep)
  
def imprt(pattern):
  """Copy one or more files from the original directory to the build directory."""

  globs = glob.glob(os.path.join(original_directory,pattern))
  if not globs:
    raise Exception("Trying to import %s, but no files match." % pattern)
  
  for fname in globs:
    fr = os.path.join(original_directory, fname)
    to = os.path.join(build_directory, os.path.basename(fname))

  # Does this file exist already?
  if os.path.isfile(to) and filecmp.cmp(fr, to, False):
    # Yes.  Nothing to do.
    pass
  else:
    print(fr)
    shutil.copy2(fr, to)
  
  return fname

def filter(shell_command):
  print(shell_command)
  p = subprocess.Popen(shell_command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
  _.text = p.communicate(input=_.text.encode('UTF-8'))[0].decode('UTF-8')
  if p.returncode != 0:
    raise Exception("Filter command '%s' failed with return code %d." % (shell_command, p.returncode))

def strip():
  _.text = _.text.rstrip()

def unindent():
  match = re.search(r'([ \t]*)[^ \t\n]', _.text)
  if match:
    prefix = match.group(1)
    _.text = re.sub('\n' + prefix, '\n', _.text)


def before_frame_hook():
  # For things like "@abc/xyz", import that file and replace with "xyz".
  def import_and_mangle(match):
    fr = match.group(1)
    fr = os.path.join(original_directory,fr)
    to = imprt(fr)
    return to
  _.text = re.sub(r'@@([^\n\},\']*)', import_and_mangle, _.text)
  _.commands = re.sub(r'@@([^\n\},\'\"]*)', import_and_mangle, _.commands)

}]]]

